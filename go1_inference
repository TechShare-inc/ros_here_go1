FROM arm64v8/ubuntu:jammy

SHELL ["/bin/bash", "-c"]

# Set the environment to non-interactive
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update -q && \
    apt-get install -y apt-utils

RUN rm /etc/apt/apt.conf.d/docker-clean

ARG ROS_DISTRO=humble
ARG INSTALL_PACKAGE=desktop

RUN apt-get update -q && \
    apt-get install -y curl gnupg2 lsb-release  && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null && \
    apt-get update -q && \
    apt-get install -y ros-${ROS_DISTRO}-${INSTALL_PACKAGE} \
    python3-argcomplete \
    python3-colcon-common-extensions \
    python3-rosdep python3-vcstool

RUN apt-get update && apt-get install -y net-tools \
    iputils-ping \
    iproute2 \
    libasio-dev \
    libpcap-dev \
    python3-rosdep \
    cmake \
    snapd \
    git \
    tmux \
    vim \
    nano \
    wget \
    espeak \
    usbutils \
    libusb-1.0-0-dev \
    zsh \
    libqt5serialport5-dev \
    software-properties-common \
    gnome-terminal \
    dbus-x11 \
    libboost-all-dev \
    libyaml-cpp-dev \
    libcanberra-gtk-module \
    libcanberra-gtk3-module \
    alsa-utils \
    linuxptp \
    kmod \
    v4l2loopback-dkms \
    rapidjson-dev \
    socat \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-bad1.0-dev \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    gstreamer1.0-x \
    gstreamer1.0-alsa \
    gstreamer1.0-gl \
    gstreamer1.0-gtk3 \
    gstreamer1.0-qt5 \
    gstreamer1.0-pulseaudio \
    python3-pip && \
    python3 -m pip install --upgrade pip && \
    rosdep init && \
    rm -rf /var/lib/apt/lists/*



RUN apt update -q && \
    apt install -y \
    ros-humble-tf-transformations \
    ros-humble-rqt* \
    ros-humble-controller-interface \
    ros-humble-effort-controllers \
    ros-humble-joint-trajectory-controller \ 
    ros-humble-ros2-control \ 
    ros-humble-ros2-controllers \
    ros-humble-pcl-conversions \
    ros-humble-xacro \
    ros-humble-librealsense2* \
    ros-humble-realsense* \
    ros-humble-apriltag-ros \
    ros-humble-camera-info-manager \ 
    ros-humble-rmw-cyclonedds-cpp \
    ros-humble-pcl-ros \ 
    ros-humble-usb-cam \
    ros-humble-v4l2-camera \
    ros-humble-rosidl-generator-dds-idl \
    ros-humble-nmea-msgs \
    ros-humble-rtcm-msgs \
    ros-humble-depthai-ros && \
    echo "source /opt/ros/humble/setup.bash" >> /home/$USERNAME/.bashrc && \
    echo "export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp" >> /home/$USERNAME/.bashrc

# Create udev rule file for PATLITE
RUN UDEV_RULES_FILE_FOR_PATLITE="/etc/udev/rules.d/99-patlite.rules" && \
    echo 'SUBSYSTEM=="usb", ATTRS{idVendor}=="191a", ATTRS{idProduct}=="6001", MODE="0666", GROUP="plugdev"' | sudo tee $UDEV_RULES_FILE_FOR_PATLITE && \
    echo 'KERNEL=="hidraw*", ATTRS{idVendor}=="191a", ATTRS{idProduct}=="6001", MODE="0666", GROUP="plugdev"' | sudo tee -a $UDEV_RULES_FILE_FOR_PATLITE


# RUN git clone https://github.com/Livox-SDK/Livox-SDK2.git && \
#     cd ./Livox-SDK2 && \
#     mkdir build  && \
#     cd build && \
#     cmake .. && make -j && \
#     make install && \
#     cd ../.. && \
#     rm -rf Livox-SDK2

RUN touch /root/.bashrc && \ 
    echo "echo 'this is humble space'" >> /root/.bashrc

# Create a non-root user and add to sudo group
ARG USERNAME=techshare
ARG USER_UID=1000
ARG USER_GID=1000

RUN groupadd --gid $USER_GID $USERNAME && \
    useradd --uid $USER_UID --gid $USER_GID -m $USERNAME && \
    echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Set up user workspace directory
RUN mkdir -p /home/$USERNAME/humble_ws && chown -R $USERNAME:$USERNAME /home/$USERNAME/humble_ws

# Set environment variables for ROS
RUN echo "source /opt/ros/humble/setup.bash" >> /home/$USERNAME/.bashrc && \
    echo "source /home/$USERNAME/humble_ws/install/setup.bash" >> /home/$USERNAME/.bashrc && \
    echo "export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp" >> /home/$USERNAME/.bashrc

# Change ownership of the home directory to the new user
RUN chown -R $USERNAME:$USERNAME /home/$USERNAME

# Go1 inference
RUN python3 -m pip install onnxruntime transforms3d numpy opencv-python ros2-numpy
# RUN python3 -m pip install transforms3d websocket-client distro numpy opencv-python depthai pyttsx3 pyfakewebcam open3d ros2-numpy && \

# Set the working directory to the user workspace
WORKDIR /home/$USERNAME/humble_ws

# Switch to the new user
USER $USERNAME

# Define the entrypoint
CMD ["bash"]
